---
- name: ODFE | Create upgrade state file
  become: true
  file:
    path: "{{ opendistro_for_elasticsearch.upgrade_state_file_path }}"
    state: touch
    mode: u=rw,g=r,o=

- name: ODFE | Ensure elasticsearch service is running
  systemd:
    name: elasticsearch
    enabled: yes
    state: started
  register: elasticsearch_state

# TODO: Get host from /etc/elasticsearch/elasticsearch.yml
- name: ODFE | Wait for elasticsearch service to start up
  when: elasticsearch_state.changed == true
  wait_for:
    port: "{{ es_transport_port }}"
    host: "{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}"
    delay: 5

- name: ODFE | Get Xmx value from /etc/elasticsearch/jvm.options
  command: grep -oP '(?<=^-Xmx)\d+[kKmMgG]?' /etc/elasticsearch/jvm.options
  register: grep_es_xmx
  changed_when: false

- name: ODFE | Load existing elasticsearch.yml
  slurp:
    src: /etc/elasticsearch/elasticsearch.yml
  register: _existing_es_config_file

- name: ODFE | Decode and parse elasticsearch.yml
  set_fact:
    _existing_es_config: "{{ _existing_es_config_file.content | b64decode | from_yaml }}"

# --- We need admin certificate for passwordless access to API ---

# Install requirements for Ansible certificate modules
- include_role:
    name: certificate
    tasks_from: install-packages.yml

- name: Get information on CA certificates
  community.crypto.x509_certificate_info:
    path: /etc/elasticsearch/{{ item }}
  loop:
    - "{{ _existing_es_config['opendistro_security.ssl.http.pemtrustedcas_filepath'] }}"
    - "{{ _existing_es_config['opendistro_security.ssl.transport.pemtrustedcas_filepath'] }}"
  register: _ca_certs_info

- name: ODFE | Check if demo certificates are in use
  set_fact:
    _is_demo_cert_in_use:
      http:      "{{ 'True' if _ca_certs_info.results[0].subject.commonName == 'Example Com Inc. Root CA' else 'False' }}"
      transport: "{{ 'True' if _ca_certs_info.results[1].subject.commonName == 'Example Com Inc. Root CA' else 'False' }}"

- name: ODFE | Include tasks that generete Epiphany certificates  # they may be renewed
  include_role:
    name: opendistro_for_elasticsearch
    tasks_from: generate-certs.yml
  register: generate_certs
  when: _is_demo_cert_in_use.http
     or _ca_certs_info.results[0].subject.commonName == 'Epiphany Managed ODFE Root CA'

- name: ODFE | Set API endpoint
  set_fact:
    elasticsearch_endpoint: >-
      https://{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}:{{ es_http_port }}
  vars:
    uri_task_template: &uri
      body_format: json
      validate_certs: false

# TODO: Implement case for custom admin cert (non-demo and non-epiphany) when not '_is_demo_cert_in_use'.
# For now we use workaround for this (upgrade_config.custom_admin_certificate).
- name: ODFE | Set API access facts
  set_fact:
    uri_client_cert: >-
      {{ (certificates.dirs.certs, certificates.files.admin.cert.filename) | path_join if (generate_certs is not skipped) else
         upgrade_config.custom_admin_certificate.cert_path }}
    uri_client_key: >-
      {{ (certificates.dirs.certs, certificates.files.admin.key.filename) | path_join if (generate_certs is not skipped) else
         upgrade_config.custom_admin_certificate.key_path }}
  when: generate_certs is not skipped
     or upgrade_config.custom_admin_certificate.active

# Here we have new certificates (when generated) but they may be not configured yet, which requires updating config file and restarting service.
# For clustered nodes it's recommended to disable shard allocation for the cluster before restarting node (https://www.elastic.co/guide/en/elasticsearch/reference/current/restart-cluster.html#restart-cluster-rolling).

- name: ODFE | Test API access using non-demo certificate
  when: not _is_demo_cert_in_use.http
  uri:
    <<: *uri
    client_cert: "{{ uri_client_cert | default(omit) }}"
    client_key:  "{{ uri_client_key  | default(omit) }}"
    # TODO: use more precise check
    url: "{{ elasticsearch_endpoint }}"
    method: GET
  register: test_api_access
  failed_when: false
  until: test_api_access.status == 200
  retries: 3
  delay: 1

- name: ODFE | Test API access using demo certificate
  when: _is_demo_cert_in_use.http
  uri:
    <<: *uri
    client_cert: /etc/elasticsearch/kirk.pem
    client_key: /etc/elasticsearch/kirk-key.pem
    # TODO: use more precise check
    url: "{{ elasticsearch_endpoint }}"
    method: GET
  register: test_api_access_using_demo_cert
  failed_when: false
  until: test_api_access_using_demo_cert.status == 200
  retries: 3
  delay: 1

- name: Fail with informative message
  fail:
    msg:
      - Accessing API at {{ elasticsearch_endpoint }} failed.
      - It looks like you use custom certificates.
      - Please refer to "Open Distro for Elasticsearch upgrade" section of How-To docs.
  when:
    - generate_certs is skipped
    - (test_api_access                 is not skipped and test_api_access.status != 200) or
      (test_api_access_using_demo_cert is not skipped and test_api_access_using_demo_cert.status != 200)

- name: Pre-upgrade tasks
  module_defaults:
    uri:
      client_cert: >-
        {{ uri_client_cert | default(omit) if (test_api_access_using_demo_cert is skipped
                                               or test_api_access_using_demo_cert.status != 200) else
           '/etc/elasticsearch/kirk.pem' }}
      client_key: >-
        {{ uri_client_key | default(omit) if (test_api_access_using_demo_cert is skipped
                                              or test_api_access_using_demo_cert.status != 200) else
           '/etc/elasticsearch/kirk-key.pem' }}
  block:
    - name: ODFE | Disable shard allocation for the cluster
      uri:
        <<: *uri
        url: "{{ elasticsearch_endpoint }}/_cluster/settings"
        method: PUT
        body: '{"persistent":{"cluster.routing.allocation.enable": "primaries"}}'
      register: response_allocation_primaries
      until: response_allocation_primaries.json.acknowledged is defined and response_allocation_primaries.json.acknowledged == true
      retries: 20
      delay: 10

    - name: ODFE | Perform a synced flush
      uri:
        <<: *uri
        url: "{{ elasticsearch_endpoint }}/_flush/synced"
        method: POST
        status_code: "200, 409"

- name: ODFE | Stop elasticsearch service
  systemd:
    name: elasticsearch
    state: stopped

- name: ODFE | Include Elasticsearch installation tasks
  include_role:
    name: opendistro_for_elasticsearch
    tasks_from: install-es.yml

- name: ODFE | Include Elasticsearch configuration tasks
  include_role:
    name: opendistro_for_elasticsearch
    tasks_from: configure-es.yml
  vars:
    jvm_options:
      xmx: "{{ grep_es_xmx.stdout_lines | last }}"
    specification:
      cluster_name: "{{ _existing_es_config['cluster.name'] }}"
      clustered: "{{ 'True' if _existing_es_config['discovery.seed_hosts'] | length > 1 else 'False' }}"
      paths:
        data: "{{ _existing_es_config['path.data'] }}"
        repo: "{{ _existing_es_config['path.repo'] | default('/var/lib/elasticsearch-snapshots') }}"  # absent in Epiphany v0.6 thus we use default
        logs: "{{ _existing_es_config['path.logs'] }}"
    existing_es_config:
      certs:
        ca_certs:
          http:
            cert_file: "{{ _existing_es_config['opendistro_security.ssl.http.pemtrustedcas_filepath'] }}"
            is_demo_cert: "{{ _is_demo_cert_in_use.http }}"
          transport:
            cert_file: "{{ _existing_es_config['opendistro_security.ssl.transport.pemtrustedcas_filepath'] }}"
            is_demo_cert: "{{ _is_demo_cert_in_use.transport }}"
        node_certs:
          http:
            cert_file: "{{ _existing_es_config['opendistro_security.ssl.http.pemcert_filepath'] }}"
            key_file:  "{{ _existing_es_config['opendistro_security.ssl.http.pemkey_filepath'] }}"
          transport:
            cert_file: "{{ _existing_es_config['opendistro_security.ssl.transport.pemcert_filepath'] }}"
            key_file:  "{{ _existing_es_config['opendistro_security.ssl.transport.pemkey_filepath'] }}"
        admin_dn: "{{ _existing_es_config['opendistro_security.authcz.admin_dn'] }}"
        nodes_dn: "{{ _existing_es_config['opendistro_security.nodes_dn'] | default([]) }}"
        ssl:
          transport:
            enforce_hostname_verification: "{{ _existing_es_config['opendistro_security.ssl.transport.enforce_hostname_verification'] }}"

- name: ODFE | Include upgrade plugins tasks
  include_tasks: opendistro_for_elasticsearch/upgrade-plugins.yml

- name: ODFE | Restart elasticsearch service
  systemd:
    name: elasticsearch
    state: restarted
    daemon_reload: yes # opendistro-performance-analyzer provides opendistro-performance-analyzer.service
  when: install_opendistro_packages.changed

- name: ODFE | Wait for elasticsearch node to come back up
  wait_for:
    port: "{{ es_transport_port }}"
    host: "{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}"
    delay: 5

- name: ODFE | Wait for elasticsearch http to come back up
  wait_for:
    port: "{{ es_http_port }}"
    host: "{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}"

- name: Post upgrade tasks
  module_defaults:
    uri:
      client_cert: "{{ uri_client_cert | default(omit) }}"
      client_key:  "{{ uri_client_key  | default(omit) }}"
  block:
    - name: ODFE | Wait for 'yellow' or 'green' cluster health status
      uri:
        <<: *uri
        url: "{{ elasticsearch_endpoint }}/_cluster/health"
        method: GET
      register: cluster_health
      until: cluster_health.json.status is defined and cluster_health.json.status in ['yellow', 'green']
      retries: 30
      delay: 5

    - name: ODFE | Enable shard allocation for the cluster
      uri:
        <<: *uri
        url: "{{ elasticsearch_endpoint }}/_cluster/settings"
        method: PUT
        body: '{"persistent":{"cluster.routing.allocation.enable": null}}'
      register: response
      until: response.json.acknowledged is defined and response.json.acknowledged == true
      retries: 30
      delay: 5

    - name: ODFE | Wait for 'yellow' or 'green' cluster health status
      uri:
        <<: *uri
        url: "{{ elasticsearch_endpoint }}/_cluster/health"
        method: GET
        return_content: yes
      register: cluster_health
      until: cluster_health.json.status is defined and cluster_health.json.status in ['yellow', 'green']
      retries: 30
      delay: 5

- name: ODFE | Remove upgrade state file
  become: true
  file:
    path: "{{ opendistro_for_elasticsearch.upgrade_state_file_path }}"
    state: absent
