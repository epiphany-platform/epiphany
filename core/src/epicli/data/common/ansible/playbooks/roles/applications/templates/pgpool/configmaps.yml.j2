---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgpool-container-env
  labels:
    app: pgpool
  namespace: {{ data.namespace }}
data:
{% if data.pgpool.env.PGPOOL_BACKEND_NODES is undefined or data.pgpool.env.PGPOOL_BACKEND_NODES == 'SET_BY_AUTOMATION' %}
  PGPOOL_BACKEND_NODES: "{% for node in groups['postgresql'] %}{{ loop.index0 }}:{{ hostvars[groups['postgresql'][loop.index0]].ansible_hostname }}:5432{% if not loop.last %},{% endif %}{% endfor %}"
{% else %}
  PGPOOL_BACKEND_NODES: "{ data.pgpool.env.PGPOOL_BACKEND_NODES }"
{% endif %}
{% for env_var, value in data.pgpool.env.items() if env_var not in ["PGPOOL_BACKEND_NODES"] %}
{#   convert boolean to 'yes' or 'no' to meet requirements #}
{%   if value is sameas true or value is sameas false %}
{%     set value = value | ternary('yes', 'no') %}
{%   endif %}
  {{ env_var }}: "{{ value }}"
{% endfor %}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: pgpool-config-file
  labels:
    app: pgpool
  namespace: {{ data.namespace }}
data:
  pgpool.conf: |
    {{ data.pgpool.config_file_content | indent(4) }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: pgpool-init
  labels:
    app: pgpool
  namespace: {{ data.namespace }}
data:
  init_pool_passwd_file.sh: |
    #!/bin/bash

    set -o errexit
    set -o nounset
    set -o pipefail

    if ! test -f $HOME/.pgpass; then
      echo "Creating '$HOME/.pgpass' file"
      touch $HOME/.pgpass && chmod 0600 $HOME/.pgpass
    fi

    # User with SELECT on pg_authid table privilege is required
    if ! grep -q ":postgres:${PGPOOL_POSTGRES_USERNAME}:" $HOME/.pgpass; then
      echo "Adding '${PGPOOL_POSTGRES_USERNAME}' user to '$HOME/.pgpass'"
      echo "*:*:postgres:${PGPOOL_POSTGRES_USERNAME}:${PGPOOL_POSTGRES_PASSWORD}" >> $HOME/.pgpass
    fi

    export PGDATABASE=postgres
    export PGUSER="$PGPOOL_POSTGRES_USERNAME"

    test_connection() {
      local -r hostname=${1:?hostname is missing}
      echo "Testing connection to '$PGDATABASE' database on '$hostname' host"
      if PGCONNECT_TIMEOUT=15 psql -h "$hostname" -tA -c "SELECT 1" >/dev/null; then
        echo "OK"
        return 0
      else
        echo "FAILED"
        return 1
      fi
    }

    run_query() {
      local -r sql=${1:?sql is missing}
      local -r hostname=${2:?hostname is missing}
      psql -h "$hostname" -tA -c "$sql"
    }

    # TODO: try all nodes from PGPOOL_BACKEND_NODES (needs parsing) before failing, see pgpool_validate() in https://github.com/bitnami/bitnami-docker-pgpool/blob/master/4/debian-10/rootfs/opt/bitnami/scripts/libpgpool.sh
    POSTGRES_HOSTNAME={{ hostvars[groups['postgresql'][0]].ansible_hostname }}

    test_connection "$POSTGRES_HOSTNAME" || { echo "ERROR: Connection test failed" 1>&2 && exit 1; }

    SQL="SELECT rolname||':'||rolpassword FROM pg_authid WHERE rolpassword IS NOT NULL"
    echo "Running query: $SQL"
    RESULT="$(run_query "$SQL" "$POSTGRES_HOSTNAME")" || { echo "ERROR: psql failed" 1>&2 && exit 1; }

    OUTPUT_FILE=/epiphany/workdir/pool_passwd

    if test -n "$RESULT"; then
      if ! test -f $OUTPUT_FILE; then
        echo "Creating '$OUTPUT_FILE' file"
      else
        echo "Updating '$OUTPUT_FILE' file"
      fi
      cat <<< "$RESULT" > $OUTPUT_FILE
    else
      echo "ERROR: 0 rows in query result" 1>&2 && exit 1;
    fi

    echo "Completed: $0"
