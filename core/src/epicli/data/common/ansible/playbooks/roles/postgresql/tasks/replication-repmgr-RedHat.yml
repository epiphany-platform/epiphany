---

# All
- name: Add user to sudoers file
  lineinfile:
    path: /etc/sudoers
    line: 'postgres ALL=(ALL:ALL) NOPASSWD: /bin/systemctl start postgresql, /bin/systemctl stop postgresql, /bin/systemctl restart postgresql, /bin/systemctl reload postgresql'
    validate: 'visudo -cf %s'

- name: Turn on replica
  replace:
    path: "{{ pg_config_dir[ansible_os_family] }}/postgresql.conf"
    regexp: "^#wal_level = replica"
    replace: "wal_level = replica"
    backup: yes

- name: Set max_wal_senders
  replace:
    path: "{{ pg_config_dir[ansible_os_family] }}/postgresql.conf"
    regexp: "^[#]?max_wal_senders\\s*=\\s*[0-9]+"
    replace: "max_wal_senders = {{ specification.additional_components.replication.max_wal_senders }}"

- name: Add password for super user in postgresql
  become_user: postgres
  postgresql_user:
    user: "{{ specification.additional_components.replication.priviledged_user_name }}"
    password: "{{ specification.additional_components.replication.priviledged_user_password }}"
    role_attr_flags: LOGIN,SUPERUSER

- name: Add replication user to postgresql
  become_user: postgres
  postgresql_user:
    user: "{{ specification.additional_components.replication.user }}"
    password: "{{ specification.additional_components.replication.password }}"
    role_attr_flags: LOGIN,REPLICATION

- name: Add replication user to pg_hba.conf
  lineinfile:
    path: "{{ pg_config_dir[ansible_os_family] }}/pg_hba.conf"
    line: "host    replication     {{ specification.additional_components.replication.user }}     0.0.0.0/0            md5"

- name: Create pgpass file
  template:
    src: pgpass-repmgr.j2
    dest: /var/lib/pgsql/.pgpass
    owner: postgres
    group: postgres
    mode: 0600

- name: Create repmgr config file
  template:
    src: repmgr.conf.j2
    dest: "{{ repmgr_config_dir[ansible_os_family] }}/repmgr.conf"
    owner: postgres
    group: postgres
    mode: 0600
  vars:
    node_id: "{{ (groups.postgresql.index(inventory_hostname) + 1) }}"

- name: Create directory for db backup
  file:
    path: /dbbackup/{{ inventory_hostname }}/backup/
    state: directory
    owner: postgres
    group: postgres

- name: Add postgresql configuration
  blockinfile:
    path: "{{ pg_config_dir[ansible_os_family] }}/postgresql.conf"
    insertafter: "# Add settings for extensions here"
    block: |
      # BEGIN - ANSIBLE MANAGED BLOCK - REPLICATION
      archive_mode = on
      archive_command = 'test ! -f /dbbackup/{{ inventory_hostname }}/backup/%f && gzip -c < %p > /dbbackup/{{ inventory_hostname }}/backup/%f'
      shared_preload_libraries = 'repmgr'
      # END - ANSIBLE MANAGED BLOCK - REPLICATION

- name: Create a new database for repmgr
  become_user: postgres
  postgresql_db:
    name: "{{ specification.additional_components.replication.repmgr_database }}"
    owner: "{{ specification.additional_components.replication.user }}"

# Master:
- name: Check if master is already registered in repmgr
  become_user: postgres
  shell: >-
    set -o pipefail &&
    /usr/pgsql-10/bin/repmgr cluster show -f {{ repmgr_config_dir[ansible_os_family] }}/repmgr.conf | grep -i {{ inventory_hostname }} | grep -v standby
  changed_when: false
  register: is_master_already_registered
  failed_when: is_master_already_registered.rc == 2
  args:
    executable: /bin/bash
  when:
    - groups['postgresql'][0] == inventory_hostname

- name: Restart postgresql service
  service:
    name: "{{ pg_service_name[ansible_os_family] }}"
    state: restarted
  when:
    - groups['postgresql'][0] == inventory_hostname
    - is_master_already_registered.stdout == ""

- name: Register primary with repmgr
  become_user: postgres
  shell: /usr/pgsql-10/bin/repmgr primary register -f {{ repmgr_config_dir[ansible_os_family] }}/repmgr.conf -F -S postgres
  when:
    - groups['postgresql'][0] == inventory_hostname
    - is_master_already_registered.stdout == ""

# Slave:
- name: Turn on hot_standby
  replace:
    path: "{{ pg_config_dir[ansible_os_family] }}/postgresql.conf"
    regexp: "^#hot_standby = on"
    replace: "hot_standby = on"
    backup: yes
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Check if node is already registered in repmgr
  become_user: postgres
  shell: >-
    set -o pipefail &&
    /usr/pgsql-10/bin/repmgr cluster show -f  {{ repmgr_config_dir[ansible_os_family] }}/repmgr.conf | grep -i {{ inventory_hostname }}
  changed_when: false
  register: is_node_already_registered
  failed_when: is_node_already_registered.rc == 2
  args:
    executable: /bin/bash
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Stop postgresql service
  service:
    name: "{{ pg_service_name[ansible_os_family] }}"
    state: stopped
  when:
    - groups['postgresql'][1] == inventory_hostname
    - is_node_already_registered.stdout == ""

- name: Clone content with repmgr
  become_user: postgres
  shell: /usr/pgsql-10/bin/repmgr -h {{ hostvars[groups['postgresql'][0]]['ansible_default_ipv4']['address'] }} -U {{ specification.additional_components.replication.priviledged_user_name }} -d {{ specification.additional_components.replication.repmgr_database }} -p 5432 -F standby clone
  when:
    - groups['postgresql'][1] == inventory_hostname
    - is_node_already_registered.stdout == ""

- name: Start postgresql service
  service:
    name: "{{ pg_service_name[ansible_os_family] }}"
    state: started
  when:
    - groups['postgresql'][1] == inventory_hostname
    - is_node_already_registered.stdout == ""

- name: Register node with repmgr
  become_user: postgres
  shell: "/usr/pgsql-10/bin/repmgr standby -F -f  {{ repmgr_config_dir[ansible_os_family] }}/repmgr.conf --upstream-conninfo='host={{ hostvars[groups['postgresql'][0]]['ansible_default_ipv4']['address'] }}, user={{ specification.additional_components.replication.user }}, dbname={{ specification.additional_components.replication.repmgr_database }}, connect_timeout=2' --upstream-node-id 1 register"
  when:
    - groups['postgresql'][1] == inventory_hostname
    - is_node_already_registered.stdout == ""

- name: Check if node is not attached to repmgr
  become_user: postgres
  shell: >-
    set -o pipefail &&
    /usr/pgsql-10/bin/repmgr cluster show -f {{ repmgr_config_dir[ansible_os_family] }}/repmgr.conf | grep -i 'not attached to its upstream node'
  changed_when: false
  register: is_node_not_attached
  failed_when: is_node_not_attached.rc == 2
  args:
    executable: /bin/bash
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Rejoin node with repmgr
  become_user: postgres
  shell: "/usr/pgsql-10/bin/repmgr standby -f {{ repmgr_config_dir[ansible_os_family] }}/repmgr.conf follow"
  when:
    - groups['postgresql'][1] == inventory_hostname
    - not is_node_not_attached.stdout == ""

# All
- name: Restart repmgrd service
  service:
    name: "{{ repmgr_service_name[ansible_os_family] }}"
    state: restarted
    enabled: yes