---
- include_tasks: check-user.yml

- name: Check if components are supported for architecture
  vars:
    architecture: "{{ hostvars[groups.all[0]]['ansible_architecture'] }}"
    os_distro:    "{{ hostvars[groups.all[0]]['ansible_distribution'] }}"
  block:
    - name: Set unsupported_components_checklist fact
      delegate_to: localhost
      become: false
      set_fact:
        unsupported_components_checklist: "{{ unsupported_roles | selectattr('distro','equalto', os_distro)
                                                                | selectattr('arch','equalto', architecture)
                                                                | map(attribute='roles') | list | flatten
                                                                | intersect(group_names) }}"

    - name: Check if components are supported for current architecture
      delegate_to: localhost
      become: false
      assert:
        that: unsupported_components_checklist | length == 0
        fail_msg: >-
          The following components in inventory are not supported for {{ architecture }} architecture on {{ os_distro }} OS:
          {{ unsupported_components_checklist | join(', ') }}.
          If the components are not neccessary, you may remove them from the feature-mapping
          (see https://github.com/epiphany-platform/epiphany/blob/develop/docs/home/howto/CLUSTER.md#how-to-create-custom-cluster-components).
        success_msg: All components supported for {{ architecture }} architecture

- name: Check if enabled applications are supported for the architecture
  block:
    - name: Include application vars from applications role
      include_vars:
        file: roles/applications/vars/main.yml
        name: k8s_apps

    - name: Check if enabled applications are supported for the architecture
      assert:
        that: _unsupported_enabled_apps | length == 0
        fail_msg: "Following application(s) are not supported for {{ _k8s_arch }} and cannot be installed: {{ _unsupported_enabled_apps | map(attribute='name') | join(', ') }}"
        success_msg: "All enabled applications are supported for {{ _k8s_arch }}"
      vars:
        _k8s_arch: >-
          {{ hostvars[groups['kubernetes_master'][0]]['ansible_architecture'] }}
        _defined: >-
          {{ k8s_apps.specification.applications | selectattr('enabled', 'defined') | list }}
        _undefined: >-
          {{ k8s_apps.specification.applications | selectattr('enabled', 'undefined') | list }}
        _enabled_apps: >-
          {{ (_defined | selectattr('enabled') | list) + _undefined }}
        _unsupported_enabled_apps: >-
          {{ _enabled_apps | selectattr('name', 'in', unsupported_apps[_k8s_arch]) | list }}
  run_once: true
  delegate_to: localhost
  when:
    - not is_upgrade_run # only for apply
    - groups.kubernetes_master is defined
    - groups.kubernetes_master | length > 0
    - "'applications' in roles_with_generated_vars" # there is a case with disabled applications by custom feature mapping

- name: Check if PostgreSQL extentions and architecture are not compatible
  block:
    - name: Include postgresql vars from postgresql role
      include_vars:
        file: roles/postgresql/vars/main.yml
        name: postgresql

    - name: Check if PostgreSQL extensions are supported for ARM architecture
      assert:
        that: not (postgresql.specification.extensions.pgbouncer.enabled | default(false) or postgresql.specification.extensions.replication.enabled | default(false))
        fail_msg: "PgBouncer and Repmgr extensions are not supported for ARM and cannot be installed"
        success_msg: "All enabled PostgreSQL extensions are supported for ARM"
  run_once: true
  delegate_to: localhost
  when:
    - not is_upgrade_run # only for 'apply'
    - groups.postgresql is defined
    - groups.postgresql | length > 0
    - hostvars[groups['postgresql'][0]]['ansible_architecture'] == "aarch64"

- include_tasks: check-os.yml

- name: Check if existing PostgreSQL needs to be migrated to distribution installed from PostgreSQL repository
  block:

  - name: Check if PostgreSQL has been installed from Software Collections repository
    command:  rpm -q rh-postgresql10-postgresql-server
    failed_when:
      - rpm_status.rc != 0
      - rpm_status.stdout.find('is not installed') == -1
    changed_when: no
    register: rpm_status

  # TODO: Add link to PostgreSQL migration from Software Collections to PostgreSQL installation from PostgreSQL repository
  - name: Validate if PostgreSQL has been installed from Software Collections repository
    assert:
      that: rpm_status.stdout.find('is not installed') != -1
      fail_msg: "You have not supported PostgreSQL installed from Software Collections repository, please migrate it according to procedure described at:
                 https://github.com/epiphany-platform/epiphany/blob/v0.6/docs/home/howto/PREREQUISITES.md#note-about-postgresql-preflight-check"
      success_msg:  "PostgresSQL installation is supported"

  when:
    - ansible_os_family == "RedHat"
    - "'postgresql' in groups"
    - "inventory_hostname in groups['postgresql']"

- import_role:
    name: preflight_facts
    tasks_from: store

- import_role:
    name: preflight_facts
    tasks_from: assert

- name: Wait for epiphany-lvm-merge.service to finish  # to avoid 'Read-only file system' error
  when: ansible_os_family == "RedHat"
  block:
    - name: Check if epiphany-lvm-merge.service exists  # exists only on Azure
      service_facts: null

    - name: Wait for epiphany-lvm-merge.service to finish
      when:
        - ansible_facts.services['epiphany-lvm-merge.service'] is defined
        - ansible_facts.services['epiphany-lvm-merge.service'].status != "disabled"
      wait_for:  # at the end service disables itself so symlink is removed
        path: /etc/systemd/system/default.target.wants/epiphany-lvm-merge.service
        state: absent
        timeout: 300
