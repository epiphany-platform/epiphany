---
- name: Ensure backup directory exists
  file:
    path: "{{ backup_dir }}/"
    state: directory
    mode: u=rwx,go=

- name: Create temporary directory
  tempfile:
    path: "{{ backup_dir }}/"
    suffix: .tmp
    state: directory
  register: backup_temp_dir

- name: Save backup and cleanup afterwards
  always:
    - name: Delete temporary directory
      file:
        path: "{{ backup_temp_dir.path }}/"
        state: absent
  block:
    - name: Get etcd image name
      shell: |
        kubectl get pods \
          --all-namespaces \
          --output jsonpath={{ jsonpath }}
      vars:
        jsonpath: >-
          "{.items[*].spec.containers[?(@.name=='etcd')].image}"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: etcd_image_name

    - name: Save etcd image name to a file
      copy:
        dest: "{{ backup_temp_dir.path }}/etcd_ver.txt"
        content: |-
          {{ etcd_image_name.stdout | trim }}

    - name: Save kubernetes PKI
      copy:
        src: /etc/kubernetes/pki  # do not put / at the end here!
        dest: "{{ backup_temp_dir.path }}/"
        remote_src: true

    - name: Save etcd snapshot
      shell: |
        docker run \
        -v "{{ backup_temp_dir.path }}/:/backup/" \
        --network host \
        --env ETCDCTL_API=3 \
        --rm "{{ etcd_image_name.stdout | trim }}" \
        etcdctl \
        --endpoints https://127.0.0.1:2379 \
        --cacert /backup/pki/etcd/ca.crt \
        --cert /backup/pki/etcd/healthcheck-client.crt \
        --key /backup/pki/etcd/healthcheck-client.key \
        snapshot save /backup/etcd-snapshot.db
      args:
        executable: /bin/bash

    - name: Check if kubeadm configuration file exists
      stat:
        path: /etc/kubeadm/kubeadm-config.yml
        get_attributes: false
        get_checksum: false
        get_mime: false
      register: stat_kubeadm_config_yml

    - when: stat_kubeadm_config_yml.stat.exists
      block:
        - name: Save kubeadm configuration file
          copy:
            src: "{{ stat_kubeadm_config_yml.stat.path }}"
            dest: "{{ backup_temp_dir.path }}/"
            remote_src: true

    - name: Get current timestamp
      run_once: true
      set_fact:
        timestamp: "{{ ansible_date_time.iso8601_basic_short }}"

    - name: Create tar.gz archive
      archive:
        path: "{{ backup_temp_dir.path }}/"
        dest: "{{ backup_dir }}/k8s_backup_{{ timestamp }}.tar.gz"
        format: gz

    - name: Create checksum file
      block:
        - name: Calculate checksum
          stat:
            path: "{{ backup_dir }}/k8s_backup_{{ timestamp }}.tar.gz"
            get_attributes: false
            get_checksum: true
            get_mime: false
            checksum_algorithm: sha1
          register: stat_k8s_backup_tar_gz

        - name: Save checksum to a file
          copy:
            dest: "{{ stat_k8s_backup_tar_gz.stat.path }}.sha1"
            content: |
              {{ stat_k8s_backup_tar_gz.stat.checksum }}  {{ stat_k8s_backup_tar_gz.stat.path | basename }}
