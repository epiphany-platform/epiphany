---
# tasks file for ignite
- name: add ignite group
  become: yes
  become_user: root
  group:
    name: ignite
    state: present

- name: add ignite user
  become: yes
  become_user: root
  user:
    name: ignite
    group: ignite

- name: Install Java package
  package:
    name: "java-1.8.0-openjdk-headless"
    state: present
  when: ansible_os_family == "RedHat"

- name: Install Java package
  package:
    name: "openjdk-8-jre-headless"
    state: present
  when: ansible_os_family == "Debian"

- name: Set java home variable
  shell: "which java | xargs readlink -f | xargs dirname | xargs dirname"
  register: java_home_location
  failed_when: "java_home_location.rc != 0"
  changed_when: false

- name: Set JAVA_HOME environment variable
  lineinfile: 
    path: /etc/environment 
    state: present 
    regexp: '^JAVA_HOME' 
    line: 'JAVA_HOME={{ java_home_location.stdout }}'

- name: Set Apache Ignite file name to install
  set_fact:
    ignite_file_name: "{{ specification.file_name }}"
  changed_when: false

- name: Check if Ignite in current version exists
  stat:
    path: /opt/ignite_{{ specification.version }}/bin/ignite.sh
  register: ignite_exists
  changed_when: false

- name: Download Ignite binaries
  include_role:
    name: download
    tasks_from: download_file
  vars:
    file_name: "{{ ignite_file_name }}"
  when: not ignite_exists.stat.exists

- name: Create temp directory
  file:
    path: /tmp/ignite_{{ specification.version }}
    state: directory
    owner: ignite
    group: ignite

- name: Uncompress the temp directory 
  unarchive:
    remote_src: yes
    src: "{{ download_directory }}/{{ ignite_file_name }}"
    dest: /tmp/ignite_{{ specification.version }}
    owner: ignite
    list_files: yes
  register: archive_contents
  when: not ignite_exists.stat.exists
   
- name: Create /opt/ignite_{{ specification.version }} directory
  file:
    path: /opt/ignite_{{ specification.version }}
    state: directory
    owner: ignite
    group: ignite

- name: Copy Ignite files from tmp location
  copy:
    remote_src: yes
    src: "/tmp/ignite_{{ specification.version }}/{{ archive_contents.files[0].split('/')[0] }}/"
    dest: /opt/ignite_{{ specification.version }}
  when: not ignite_exists.stat.exists

- name: Link /opt/ignite to the right version
  file:
    dest: /opt/ignite
    state: link
    src: /opt/ignite_{{ specification.version }}

- name: Copy Ignite enabled plugins
  copy:
    remote_src: yes
    src: "/opt/ignite/libs/optional/{{ item }}"
    dest: /opt/ignite/libs
  with_items: "{{ specification.enabled_plugins }}"
  register: plugins_installed

- name: Set Ignite ip discovery list
  set_fact:
    ip_discovery_list: "{{ lookup('template', 'ip-discovery.xml.j2') }}"
  changed_when: false

- name: Prepare Ignite configuration
  set_fact:
    ignite_configuration: "{{ specification.config | replace('IP_LIST_PLACEHOLDER',ip_discovery_list) }}"
  changed_when: false

- name: Create Ignite config file
  template:
    dest: /opt/ignite/config/default-config.xml
    owner: ignite
    group: ignite
    mode: 0644
    src: default-config.xml.j2
  register: ignite_configuration_created

- name: Create systemd service
  template:
    dest: /etc/systemd/system/ignite.service
    owner: ignite
    group: ignite
    mode: 0644
    src: ignite.service.j2
  register: ignite_systemd_service_created

- name: systemctl daemon-reload
  become: yes
  become_user: root
  systemd:
    daemon_reload: yes
  when: ignite_systemd_service_created is changed

- name: Start ignite
  become: yes
  become_user: root
  service:
    name: ignite
    enabled: yes
    state: started

- name: Restart Ignite service
  become: yes
  systemd: 
    name: ignite 
    state: restarted 
    enabled: yes
  when: plugins_installed.changed or ignite_configuration_created.changed
