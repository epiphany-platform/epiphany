---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgpool
  labels:
    app: pgpool
  namespace: {{ data.namespace }}
spec:
  replicas: {{ data.replicas }}
  selector:
    matchLabels:
      app: pgpool
  template:
    metadata:
      name: pgpool
      labels:
        app: pgpool
    spec:
{% for field, value in data.pod_spec.items() if value %}{# affinity, nodeSelector, tolerations #}
      {{ field }}:
        {{ value | to_nice_yaml(indent=2) | indent(8) | trim }}
{% endfor %}
      containers:
        - name: pgpool
          image: {{ image_registry_address }}/{{ data.image.path }}
          envFrom:
            - configMapRef:
                name: pgpool-container-env
          env:
            - name: BITNAMI_DEBUG
              value: "{{ data.image.debug | ternary('true', 'false') }}"
            - name: PGPOOL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgpool-passwords
                  key: pgpool_admin_password
            - name: PGPOOL_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgpool-passwords
                  key: pgpool_postgres_password
            - name: PGPOOL_SR_CHECK_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgpool-passwords
                  key: pgpool_sr_check_password
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /healthcheck.sh
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
{#              TODO: switch to no super user - PGPOOL_USERNAME if possible, when tried (with default pgpool.conf), got error: pool_passwd file does not contain an entry for "epi_pgpool" #}
                - PGPASSWORD=${PGPOOL_POSTGRES_PASSWORD} psql -U "${PGPOOL_POSTGRES_USERNAME}" -d "${PGDATABASE}" -h 127.0.0.1 -tA -c "SELECT 1" >/dev/null
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            {{ data.resources | to_nice_yaml(indent=2) | indent(12) | trim }}
          volumeMounts:
            - name: postgresql-password
              mountPath: /opt/bitnami/pgpool/secrets/pgpool_postgres_password
              subPath: pgpool_postgres_password
            - name: pgpool-password
              mountPath: /opt/bitnami/pgpool/secrets/pgpool_admin_password
              subPath: pgpool_admin_password
            - name: pgpool-workdir
              mountPath: /opt/bitnami/pgpool/conf/pool_passwd
              subPath: pool_passwd
      initContainers:
{#        pgpool-init container is for creating/refreshing pool_passwd file, users having passwords are fetched from PostgreSQL instance directly #}
        - name: pgpool-init
          image: {{ image_registry_address }}/{{ data.image.path }}
          command:
            - /epiphany/scripts/init_pool_passwd_file.sh
          envFrom:
            - configMapRef:
                name: pgpool-container-env
          env:
            - name: PGPOOL_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgpool-passwords
                  key: pgpool_postgres_password
          volumeMounts:
            - name: pgpool-init-script
              mountPath: /epiphany/scripts
            - name: pgpool-workdir
              mountPath: /epiphany/workdir
{#    TODO: check whether it's OK to use better names #}
      volumes:
        - name: postgresql-password
          secret:
            secretName: pgpool-passwords
            items:
              - key: pgpool_postgres_password
                path: pgpool-password
        - name: pgpool-password
          secret:
            secretName: pgpool-passwords
            items:
              - key: pgpool_admin_password
                path: admin-password
        - name: pgpool-init-script
          configMap:
            name: pgpool-init
            items:
              - key: init_pool_passwd_file.sh
                path: init_pool_passwd_file.sh
                mode: 0755
        - name: pgpool-workdir
          emptyDir: {}
      restartPolicy: Always
