---
# Zookeeper tasks - resides on masters

- name: Download {{ ansible_os_family }} 'openjdk-8-jre' for Zookeeper v{{ specification.version }}
  include_role:
    name: download
    tasks_from: download_package
  vars:
    package_arg: "{{ dependencies.zookeeper[specification.version].packages | selectattr('id', 'equalto', 'openjdk-8-jre') | list | first }}"
  when: ansible_os_family == "Debian"

- name: Install {{ ansible_os_family }} package from {{ file.dest_path }}
  apt:
    deb: "{{ file.dest_path }}"
    state: present
  when: ansible_os_family == "Debian"

- name: Download {{ ansible_os_family }} 'java-1.8.0-openjdk' for Zookeeper v{{ specification.version }}
  include_role:
    name: download
    tasks_from: download_package
  vars:
    package_arg: "{{ dependencies.zookeeper[specification.version].packages | selectattr('id', 'equalto', 'java-1.8.0-openjdk') | list | first }}"
  when: ansible_os_family == "RedHat"

- name: Install {{ ansible_os_family }} package from {{ file.dest_path }}
  yum:
    name: "{{ file.dest_path }}"
    state: present
  when: ansible_os_family == "RedHat"

- name: Check if jmx exporter is available
  stat:
    path: "{{ prometheus_jmx_path }}"
  register: exporter

- name: Create Zookeeper group
  group:
    name: "{{ zookeeper_group }}"
    system: yes

- name: Create Zookeeper user
  user:
    name: "{{ zookeeper_user }}"
    group: "{{ zookeeper_group }}"
    system: yes
    shell: "/usr/sbin/nologin"

# - name: Check for Zookeeper package
#   stat:
#     path: /tmp/{{ zookeeper }}.tar.gz
#   register: zoo

# - name: Fetch Zookeeper binary package
#   get_url:
#     url: "{{ zookeeper_url }}/{{ zookeeper }}/{{ zookeeper }}.tar.gz"
#     dest: /tmp/{{ zookeeper }}.tar.gz
#     validate_certs: "{{ validate_certs | bool }}"
#   when: not zoo.stat.exists

# - name: Get sha512 sum of archive
#   stat:
#     path: "/tmp/{{ zookeeper }}.tar.gz"
#     checksum_algorithm: sha512
#     get_checksum: yes
#   register: zookeeper_download_stat

# - name: Display sha of archive
#   debug:
#     msg: "Zookeeper SHA512: {{ zookeeper_download_stat.stat.checksum }}"

# - name: Verify sha512 of archive before installation.
#   fail:
#     msg: "File checksum is not correct."
#   when: zookeeper_download_stat.stat.checksum != specification.sha

# - name: Uncompress the Zookeeper tar
#   unarchive:
#     copy: no
#     creates: "{{ zookeeper_dir }}"
#     src: /tmp/{{ zookeeper }}.tar.gz
#     dest: /opt

- name: Set zookeeper variable with version name
  set_fact:
    zookeeper_name: "zookeeper-{{ specification.version }}"
  changed_when: false

- name: Set zookeeper install dir for {{ zookeeper_name }}
  set_fact:
    zookeeper_install_dir: "/opt/{{ zookeeper_name }}"
  changed_when: false

- name: Download Zookeeper binaries
  include_role:
    name: download
    tasks_from: download_file
  vars:
    file_arg: "{{ dependencies.zookeeper[specification.version].files | selectattr('id', 'equalto', 'zookeeper') | list | first }}"

- name: Create {{ zookeeper_install_dir }} directories
  become: yes
  file:
    path: "{{ item }}"
    recurse: yes
    owner: "{{ zookeeper_user }}"
    group: "{{ zookeeper_group }}"
    mode: 0750
    state: directory
  with_items:
  - "{{ zookeeper_install_dir }}"

- name: Unpack {{ zookeeper_name }} binary
  become: false
  unarchive:
    remote_src: yes
    src: "{{ file.dest_path }}"
    dest: "/opt/"
    creates: "{{ zookeeper_install_dir }}"
    extra_opts: [--strip-components=1]
    mode: 0755
    owner: "{{ zookeeper_user }}"
    group: "{{ zookeeper_group }}"
  check_mode: false

- name: "Create zookeeper {{item}} directory."
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ zookeeper_user }}"
    group: "{{ zookeeper_group }}"
  with_items:
    - "{{ zookeeper_data_dir }}"
    - "{{ zookeeper_log_dir }}"
    - "/etc/zookeeper/conf"

- name: Systemd script.
  template:
    src: zookeeper.service.j2
    dest: /lib/systemd/system/zookeeper.service
  when: ansible_service_mgr == 'systemd'
  notify:
    - Reload systemctl daemon
    - Restart zookeeper

- name: Set Zookeeper server id
  copy:
    content: "{{ (groups.zookeeper.index(inventory_hostname) + 1) }}\n"
    dest: /var/lib/zookeeper/myid
    owner: "{{ zookeeper_user }}"
    group: "{{ zookeeper_group }}"
  notify: Restart zookeeper

- name: Configure Zookeeper
  template:
    src: zoo.j2
    dest: "{{ zookeeper_install_dir }}/conf/zoo.cfg"
    owner: "{{ zookeeper_user }}"
    group: "{{ zookeeper_group }}"
  notify: Restart zookeeper

- name: Link /opt/zookeeper to the right version
  file: path=/opt/zookeeper state=link src="{{ zookeeper_install_dir }}"

# - name: Link /etc/zookeeper/conf to /opt/zookeeper/config
#   file: path=/etc/zookeeper/conf state=link src=/opt/zookeeper/conf

- name: Add Zookeeper's bin dir to the PATH
  copy:
    content: "export PATH=$PATH:/opt/zookeeper/bin"
    dest: "/etc/profile.d/zookeeper_path.sh"
    mode: 0755

- name: Update the log4j config with saner production values
  template:
    src: log4j.properties.j2
    dest: "{{ zookeeper_install_dir }}/conf/log4j.properties"
  notify:
    - Restart zookeeper

- name: Start Zookeeper
  service:
    name: zookeeper
    state: started
    enabled: yes

- include_tasks: metrics.yml
  when: exporter.stat.exists

