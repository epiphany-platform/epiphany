---
# Invoke with (example):
#- set_fact:
#    recovery_inline_script: >-
#      (date; uname -a) | gunzip 1> /tmp/date_uname-a
#    recovery_source_file: "{{ recovery_source_dir }}/date_uname-a.gz"

- name: Assert that "recovery_inline_script" and "recovery_source_file" facts are defined and valid
  assert:
    that:
      - recovery_inline_script is defined
      - recovery_inline_script is string
      - recovery_inline_script | length > 0
      - recovery_source_file is defined
      - recovery_source_file is string
      - recovery_source_file | length > 0
    fail_msg: The recovery_inline_script and recovery_source_file facts must be defined and both must be non-empty strings.

- name: Upload artifacts from mounted storage

  delegate_to: "{{ recovery_source_host }}"

  always:
    - name: Delete generated files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ private_key_file.path }}"
        - "{{ private_key_file.path }}.pub"

    - delegate_to: "{{ inventory_hostname }}"  # cancel previous delegate_to
      block:
        - name: Remove public openssh key from admin's authorized_keys
          authorized_key:
            user: "{{ admin_user.name }}"
            state: absent
            key: >-
              {{ openssh_keypair.public_key }}

  block:
    - name: Create a temporary file path to hold the private key in
      tempfile:
        path: ~/.ssh/
        suffix: .tmp
        state: file
      register: private_key_file

    - name: Generate openssh keypair for rsync over ssh
      openssh_keypair:
        path: "{{ private_key_file.path }}"
        size: 2048
        force: true
      register: openssh_keypair

    - delegate_to: "{{ inventory_hostname }}"  # cancel previous delegate_to
      block:
        - name: Add public openssh key to admin's authorized_keys
          authorized_key:
            user: "{{ admin_user.name }}"
            state: present
            key: >-
              {{ openssh_keypair.public_key }}

    - name: Load local data and execute remote script to restore the backup
      shell: |
        set -o errexit -o nounset -o pipefail
        dd if=$SOURCE_FILE oflag=dsync | ssh -i $SSH_KEY_PATH $SSH_OPTIONS $SSH_USER@$SSH_HOST -- \
          "set -o errexit -o nounset -o pipefail && $INLINE_SCRIPT"
      environment:
        SSH_KEY_PATH: "{{ private_key_file.path }}"
        SSH_OPTIONS: "-S none -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        SSH_USER: "{{ admin_user.name }}"
        SSH_HOST: "{{ ansible_default_ipv4.address }}"
        INLINE_SCRIPT: "{{ recovery_inline_script }}"
        SOURCE_FILE: "{{ recovery_source_file }}"
      args:
        executable: /bin/bash
