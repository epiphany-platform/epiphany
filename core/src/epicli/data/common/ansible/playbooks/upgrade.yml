---
# Ansible playbook for upgrading common and K8s components

- hosts: all
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: common

- hosts: kubernetes_master
  become: true
  become_method: sudo
  pre_tasks:
    # Needed for tasks upgrade playbook borrows from kubernetes_master role.
    - import_role:
        name: kubernetes_common
        tasks_from: gather-facts
      when: "'kubernetes' in upgrade_components or upgrade_components|length == 0"

    - include_role:
        name: upgrade
        tasks_from: kubernetes/gather-static-facts
      run_once: true
      when: "'kubernetes' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.remote }}"

- hosts: kubernetes_master:kubernetes_node
  serial: 1
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: image-registry
      when: "'kubernetes' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.remote }}"

- hosts: kubernetes_master:kubernetes_node
  serial: 1
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: kubernetes
      vars: { ver: "1.15.10", cni_ver: "0.7.5", upgrade_to_final_version: false }
      when: "'kubernetes' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.remote }}"

- hosts: kubernetes_master:kubernetes_node
  serial: 1
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: kubernetes
      vars: { ver: "1.16.7", cni_ver: "0.7.5", upgrade_to_final_version: false }
      when: "'kubernetes' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.remote }}"

- hosts: kubernetes_master:kubernetes_node
  serial: 1
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: kubernetes
      vars: { ver: "1.17.7", cni_ver: "0.8.6", cni_in_kubelet: true, upgrade_to_final_version: false }
      when: "'kubernetes' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.remote }}"

- hosts: kubernetes_master:kubernetes_node
  serial: 1
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: kubernetes
      vars: { ver: "1.18.6", cni_ver: "0.8.6", upgrade_to_final_version: true }
      when: "'kubernetes' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.remote }}"

- hosts: elasticsearch_curator
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: elasticsearch-curator
      when: "'elasticsearch_curator' in upgrade_components or upgrade_components|length == 0"

- hosts: filebeat
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: filebeat
      when: 
        - groups.logging is defined # do not upgrade if there is legacy Elasticsearch (v6)
        - "'filebeat' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.local }}"

- hosts: logging
  become: true
  become_method: sudo
  serial: 1
  tasks:
    - import_role:
        name: upgrade
        tasks_from: opendistro_for_elasticsearch
      vars:
        current_group_name: "logging"
      when: "'logging' in upgrade_components or upgrade_components|length == 0"

- hosts: opendistro_for_elasticsearch
  become: true
  become_method: sudo
  serial: 1
  tasks:
    - import_role:
        name: upgrade
        tasks_from: opendistro_for_elasticsearch
      vars:
        current_group_name: "opendistro_for_elasticsearch"
      when: "'opendistro_for_elasticsearch' in upgrade_components or upgrade_components|length == 0"

- hosts: kibana
  become: true
  become_method: sudo
  serial: 1
  tasks:
    - import_role:
        name: upgrade
        tasks_from: kibana
      when: "'kibana' in upgrade_components or upgrade_components|length == 0"

- hosts: grafana
  become: true
  become_method: sudo
  serial: 1
  tasks:
    - import_role:
        name: upgrade
        tasks_from: grafana
      when: "'grafana' in upgrade_components or upgrade_components|length == 0"

- hosts: zookeeper
  serial: 1
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: zookeeper
      vars: { lock_file: /var/tmp/zookeeper-upgrade-in-progress.flag }
      when: "'zookeeper' in upgrade_components or upgrade_components|length == 0"

- hosts: kafka
  serial: 1
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: kafka
      vars: { lock_file: /var/tmp/kafka-upgrade-in-progress.flag }
      when: "'kafka' in upgrade_components or upgrade_components|length == 0"

- hosts: rabbitmq
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: rabbitmq
      vars: { lock_file: /var/tmp/rabbitmq-upgrade-in-progress.flag }
      when: "'rabbitmq' in upgrade_components or upgrade_components|length == 0"

- hosts: ignite
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: ignite
      when: "'ignite' in upgrade_components or upgrade_components|length == 0"

- hosts: haproxy
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: load_balancer
      when: "'load_balancer' in upgrade_components or upgrade_components|length == 0"

- hosts: node_exporter
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: node-exporter
      when: "'node_exporter' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.local }}"
