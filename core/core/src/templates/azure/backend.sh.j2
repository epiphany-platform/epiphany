#!/bin/bash
#
# Copyright 2019 ABB. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# NOTE: Other scripts may call this script so do not change parameters unless you know the impact!

# Can use 'basename' to extract name from parameter 1 and assign it to parameter 2. This can be done
# in a higher level helper script if desired.

# backend.sh created by gen_sp.sh and used to init a terraform backend if enabled.

# Exit immediately if something goes wrong.
set -e

{% if core.azure.terraform.backend.enable %}
export REPO_ROOT=$(git rev-parse --show-toplevel)

# Parameter 4 (data file) is optional

DATA=''

if [[ ! -z $4 ]];then
    DATA=$4
fi

COMMON_SCRIPTS_BASE=core/src/scripts/common
COMMON_TEMPLATES_BASE=core/src/templates/common
AZURE_TEMPLATES_BASE=core/src/templates/azure

source $REPO_ROOT/$COMMON_SCRIPTS_BASE/base_colors.sh

DATA_DIR=$1
OUTPUT_DIR=$2
OUTPUT_TF_FILE=$3

if [[ -z $DATA ]]; then
    DATA=data.yaml
fi

if [[ -z $DATA_DIR ]]; then
    echo_red '====> ERROR: MUST specify a valid Data directory! <===='
    exit 1
fi

if [[ -z $OUTPUT_DIR ]]; then
    echo_red '====> ERROR: MUST specify a valid OUTPUT directory! <===='
    exit 1
fi

source $OUTPUT_DIR/env.sh $DATA_DIR

echo_yellow "====> Checking access_key"

# It's assumed the access_key exists if terraform.json is present so no need to run terraform
if [[ ! -f $OUTPUT_DIR/terraform.json ]]; then
    if [[ -f $OUTPUT_DIR/backend.tf ]]; then
        rm -f $OUTPUT_DIR/backend.tf
    fi

    (cd $OUTPUT_DIR && terraform output -json -state=$OUTPUT_DIR/terraform.tfstate > $OUTPUT_DIR/terraform.json)
fi

# The terraform.json file will get overridden later with more data.
ACCESS_KEY=$(jq '.storage_backend_access_key.value' $OUTPUT_DIR/terraform.json)

if [[ -z $ACCESS_KEY ]]; then
    echo_red "====> ERROR: Unable to obtain access_key - $ACCESS_KEY from $OUTPUT_DIR/terraform.tfstate"
    echo
    exit 1
fi

# Remove the quotes if there are any
temp="${ACCESS_KEY%\"}"
ACCESS_KEY="${temp#\"}"

$REPO_ROOT/bin/template_engine -d $DATA_DIR/$DATA -i $REPO_ROOT/$AZURE_TEMPLATES_BASE/backend.tf.j2 -o $OUTPUT_DIR/backend.tf

echo
echo_yellow '====> Creating backend vars'

# $REPO_ROOT/bin/template_engine -d $DATA_DIR/$DATA -i $REPO_ROOT/$AZURE_TEMPLATES_BASE/config.tfvars.j2 -o $OUTPUT_DIR/config.tfvars

# Give Azure a little time to propagate the storage and container
# sleep {{ core.azure.terraform.backend.sleep }}

source $OUTPUT_DIR/env.sh $DATA_DIR

if [[ ! -f $OUTPUT_DIR/terraform.init.backend ]]; then
    echo "terraform init -backend-config=access_key= ... $OUTPUT_DIR"
    # -backend-config=config.tfvars
    (cd $OUTPUT_DIR && terraform init -force-copy -backend-config="access_key=$ACCESS_KEY" $OUTPUT_DIR)
fi

if [[ $? -eq 0 ]]; then
    set +e
    rm -f $OUTPUT_DIR/terraform.tfstate
    rm -f $OUTPUT_DIR/terraform.tfstate.backup
    echo "# Terraform init (backend) has been completed - ONLY remove this file if you want it to run again!" > $OUTPUT_DIR/terraform.init.backend
    set -e
else
    set +e
    rm -f $OUTPUT_DIR/terraform.init.backend
    set -e
fi

exit 0
{% else %}
# NOTE: Stubbed out because 'core.azure.terraform.backend.enable' is not set to true' so Terraform is using local state files.
exit 0
{% endif %}
