---
# Master:

- name: Change postgresql.conf
  apt:
    name: python-psycopg2
    update_cache: yes
    state: present

- name: Change postgresql.conf
  replace:
    path: /etc/postgresql/10/main/postgresql.conf
    regexp: "#wal_level = replica"
    replace: "wal_level = replica"
    backup: yes
  when:
    - groups['postgresql'][0] == inventory_hostname


- name: Change postgresql.conf
  replace:
    path: /etc/postgresql/10/main/postgresql.conf
    regexp: "#max_wal_senders = 10"
    replace: "max_wal_senders = 5"
    backup: yes
  when:
    - groups['postgresql'][0] == inventory_hostname

- name: Change postgresql.conf
  replace:
    path: /etc/postgresql/10/main/postgresql.conf
    regexp: "#wal_keep_segments = 0"
    replace: "wal_keep_segments = 32"
    backup: yes
  when:
    - groups['postgresql'][0] == inventory_hostname

- name: Add replication user to postgresql
  become_user: postgres
  postgresql_user:
    user: "{{ postgresql.replication.user }}"
    password: "{{ postgresql.replication.password }}"
    role_attr_flags: LOGIN,REPLICATION
  when:
    - groups['postgresql'][0] == inventory_hostname

- name: Check if replication user exists in pg_hba.conf
  debug:
    msg: "^host    replication     {{ postgresql.replication.user }}     {{ hostvars[groups['postgresql'][1]]['ansible_default_ipv4']['address'] }}/32              md5"
  when:
    - groups['postgresql'][0] == inventory_hostname

- name: Check if replication user exists in pg_hba.conf
  shell: grep "^host    replication     {{ postgresql.replication.user }}     {{ hostvars[groups['postgresql'][1]]['ansible_default_ipv4']['address'] }}/32              md5" /etc/postgresql/10/main/pg_hba.conf
  register: test_replication 
  failed_when: "test_replication.rc == 2"
  when:
    - groups['postgresql'][0] == inventory_hostname

- name: Add replication user to pg_hba.conf
  lineinfile:
    path: /etc/postgresql/10/main/pg_hba.conf
    line: "host    replication     {{ postgresql.replication.user }}     {{ hostvars[groups['postgresql'][1]]['ansible_default_ipv4']['address'] }}/32              md5"
  when:
    - groups['postgresql'][0] == inventory_hostname
    - test_replication.stdout == ""

- name: Restart postgresql service
  service:
    name: postgresql
    state: restarted
  when:
    - groups['postgresql'][0] == inventory_hostname

- name: Disable ufw
  ufw:
    state: disabled
  when:
    - groups['postgresql'][0] == inventory_hostname

# Slave:

- name: Stop postgresql service
  service:
    name: postgresql
    state: stopped
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Change postgresql.conf
  replace:
    path: /etc/postgresql/10/main/postgresql.conf
    regexp: "#hot_standby = on"
    replace: "hot_standby = on"
    backup: yes
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Create pgpass file
  template:
    src: pgpass.j2
    dest: /var/lib/postgresql/.pgpass
    owner: postgres
    group: postgres
    mode: 0600
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Clean data directory
  shell: "rm -rf /var/lib/postgresql/10/main/*"
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Replicate content with pg_basebackup
  become_user: postgres
  shell: "pg_basebackup -h {{ hostvars[groups['postgresql'][0]]['ansible_default_ipv4']['address'] }} -D /var/lib/postgresql/10/main/ -P -U replication --wal-method=stream"
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Create recovery.conf file
  template:
    src: recovery.conf.j2
    dest: /var/lib/postgresql/10/main/recovery.conf
    owner: postgres
    group: postgres
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Start postgresql service
  service:
    name: postgresql
    state: started
  when:
    - groups['postgresql'][1] == inventory_hostname

