---
admin_user:
  name: operations

api_server: "{{ master_hostname }}:6443"
bearer_token: "{{ kube_token.stdout }}"
master_hostname: "{{ groups['master'] | first }}"
prometheus_version: 2.3.0

prometheus_config_dir: /etc/prometheus
prometheus_db_dir: /var/lib/prometheus

prometheus_web_listen_address: "0.0.0.0:9090"
prometheus_web_external_url: ''

prometheus_storage_retention: "30d"

prometheus_config_flags_extra: {}
# prometheus_config_flags_extra:
#   storage.tsdb.retention: 15d
#   alertmanager.timeout: 10s

prometheus_alertmanager_config: []
# prometheus_alertmanager_config:
#   - scheme: https
#     path_prefix: /alertmanager
#     basic_auth:
#       username: user
#       password: pass
#     static_configs:
#       - targets: ["127.0.0.1:9093"]
#     proxy_url: "127.0.0.2"

prometheus_global:
  scrape_interval: 15s
  scrape_timeout: 10s
  evaluation_interval: 15s

prometheus_remote_write: []
# prometheus_remote_write:
#   - url: https://dev.kausal.co/prom/push
#     basic_auth:
#       password: FOO

prometheus_remote_read: []
# prometheus_remote_read:
#   - url: https://demo.cloudalchemy.org:9201/read
#     basic_auth:
#       password: FOO

prometheus_external_labels:
  environment: "{{ ansible_fqdn }}"

prometheus_targets: {}
#  node:
#    - targets:
#        - localhost:9100
#      labels:
#        env: test

alertmanager_version: 0.15.2
alertmanager_config_file: alertmanager.yml.j2

prometheus_scrape_configs:
  - job_name: "prometheus"
    metrics_path: "{{ prometheus_metrics_path }}"
    static_configs:
      - targets:
          - "{{ ansible_fqdn | default(ansible_host) | default('localhost') }}:9090"
  - job_name: "file_service_discovery"
    file_sd_configs:
      - files:
          - "{{ prometheus_config_dir }}/file_sd/*.yml"
  - job_name: 'kubernetes-apiservers'
    scheme: https
    tls_config:
        insecure_skip_verify: true
    bearer_token:  "{{ bearer_token }}"
    kubernetes_sd_configs:
    - api_server: "{{ api_server }}"
      role: endpoints
      bearer_token: "{{ bearer_token }}"
      tls_config:
        insecure_skip_verify: true
    relabel_configs:
    - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
      action: keep
      regex: default;kubernetes;https
  - job_name: 'kubernetes-nodes'
    scheme: https
    tls_config:
        insecure_skip_verify: true
    bearer_token:  "{{ bearer_token }}"
    kubernetes_sd_configs:
    - api_server: "{{ api_server }}"
      role: node
      tls_config:
        insecure_skip_verify: true
      bearer_token: "{{ bearer_token }}"
    relabel_configs:
    - action: labelmap
      regex: __meta_kubernetes_node_label_(.+)
    - target_label: __address__
      replacement: "{{ master_hostname }}:6443"
    - source_labels: [__meta_kubernetes_node_name]
      regex: (.+)
      target_label: __metrics_path__
      replacement: /api/v1/nodes/${1}/proxy/metrics
  - job_name: 'kubernetes-cadvisor'
    scheme: https
    tls_config:
        insecure_skip_verify: true
    bearer_token: "{{ bearer_token }}"
    kubernetes_sd_configs:
    - api_server: "{{ api_server }}"
      role: node
      tls_config:
        insecure_skip_verify: true
      bearer_token: "{{ bearer_token }}"
    relabel_configs:
    - action: labelmap
      regex: __meta_kubernetes_node_label_(.+)
    - target_label: __address__
      replacement: "{{ master_hostname }}:6443"
    - source_labels: [__meta_kubernetes_node_name]
      regex: (.+)
      target_label: __metrics_path__
      replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

      #TODO BELOW

#  # Example scrape config for service endpoints.
#  #
#  # The relabeling allows the actual service scrape endpoint to be configured
#  # for all or only some endpoints.
#  - job_name: 'kubernetes-service-endpoints'
#
#    kubernetes_sd_configs:
#    - role: endpoints
#
#    relabel_configs:
#    # Example relabel to scrape only endpoints that have
#    # "example.io/should_be_scraped = true" annotation.
#    #  - source_labels: [__meta_kubernetes_service_annotation_example_io_should_be_scraped]
#    #    action: keep
#    #    regex: true
#    #
#    # Example relabel to customize metric path based on endpoints
#    # "example.io/metric_path = <metric path>" annotation.
#    #  - source_labels: [__meta_kubernetes_service_annotation_example_io_metric_path]
#    #    action: replace
#    #    target_label: __metrics_path__
#    #    regex: (.+)
#    #
#    # Example relabel to scrape only single, desired port for the service based
#    # on endpoints "example.io/scrape_port = <port>" annotation.
#    #  - source_labels: [__address__, __meta_kubernetes_service_annotation_example_io_scrape_port]
#    #    action: replace
#    #    regex: ([^:]+)(?::\d+)?;(\d+)
#    #    replacement: $1:$2
#    #    target_label: __address__
#    #
#    # Example relabel to configure scrape scheme for all service scrape targets
#    # based on endpoints "example.io/scrape_scheme = <scheme>" annotation.
#    #  - source_labels: [__meta_kubernetes_service_annotation_example_io_scrape_scheme]
#    #    action: replace
#    #    target_label: __scheme__
#    #    regex: (https?)
#    - action: labelmap
#      regex: __meta_kubernetes_service_label_(.+)
#    - source_labels: [__meta_kubernetes_namespace]
#      action: replace
#      target_label: kubernetes_namespace
#    - source_labels: [__meta_kubernetes_service_name]
#      action: replace
#      target_label: kubernetes_name
#
#  # Example scrape config for probing services via the Blackbox Exporter.
#  #
#  # The relabeling allows the actual service scrape endpoint to be configured
#  # for all or only some services.
#  - job_name: 'kubernetes-services'
#
#    metrics_path: /probe
#    params:
#      module: [http_2xx]
#
#    kubernetes_sd_configs:
#    - role: service
#
#    relabel_configs:
#    # Example relabel to probe only some services that have "example.io/should_be_probed = true" annotation
#    #  - source_labels: [__meta_kubernetes_service_annotation_example_io_should_be_probed]
#    #    action: keep
#    #    regex: true
#    - source_labels: [__address__]
#      target_label: __param_target
#    - target_label: __address__
#      replacement: blackbox-exporter.example.com:9115
#    - source_labels: [__param_target]
#      target_label: instance
#    - action: labelmap
#      regex: __meta_kubernetes_service_label_(.+)
#    - source_labels: [__meta_kubernetes_namespace]
#      target_label: kubernetes_namespace
#    - source_labels: [__meta_kubernetes_service_name]
#      target_label: kubernetes_name
#
#  # Example scrape config for probing ingresses via the Blackbox Exporter.
#  #
#  # The relabeling allows the actual ingress scrape endpoint to be configured
#  # for all or only some services.
#  - job_name: 'kubernetes-ingresses'
#
#    metrics_path: /probe
#    params:
#      module: [http_2xx]
#
#    kubernetes_sd_configs:
#    - role: ingress
#
#    relabel_configs:
#    # Example relabel to probe only some ingresses that have "example.io/should_be_probed = true" annotation
#    #  - source_labels: [__meta_kubernetes_ingress_annotation_example_io_should_be_probed]
#    #    action: keep
#    #    regex: true
#    - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]
#      regex: (.+);(.+);(.+)
#      replacement: ${1}://${2}${3}
#      target_label: __param_target
#    - target_label: __address__
#      replacement: blackbox-exporter.example.com:9115
#    - source_labels: [__param_target]
#      target_label: instance
#    - action: labelmap
#      regex: __meta_kubernetes_ingress_label_(.+)
#    - source_labels: [__meta_kubernetes_namespace]
#      target_label: kubernetes_namespace
#    - source_labels: [__meta_kubernetes_ingress_name]
#      target_label: kubernetes_name
#
#  # Example scrape config for pods
#  #
#  # The relabeling allows the actual pod scrape to be configured
#  # for all the declared ports (or port-free target if none is declared)
#  # or only some ports.
#  - job_name: 'kubernetes-pods'
#
#    kubernetes_sd_configs:
#    - role: pod
#
#    relabel_configs:
#    # Example relabel to scrape only pods that have
#    # "example.io/should_be_scraped = true" annotation.
#    #  - source_labels: [__meta_kubernetes_pod_annotation_example_io_should_be_scraped]
#    #    action: keep
#    #    regex: true
#    #
#    # Example relabel to customize metric path based on pod
#    # "example.io/metric_path = <metric path>" annotation.
#    #  - source_labels: [__meta_kubernetes_pod_annotation_example_io_metric_path]
#    #    action: replace
#    #    target_label: __metrics_path__
#    #    regex: (.+)
#    #
#    # Example relabel to scrape only single, desired port for the pod
#    # based on pod "example.io/scrape_port = <port>" annotation.
#    # Note that __address__ is modified here, so if pod containers' ports
#    # are declared, they all will be ignored.
#    #  - source_labels: [__address__, __meta_kubernetes_pod_annotation_example_io_scrape_port]
#    #    action: replace
#    #    regex: ([^:]+)(?::\d+)?;(\d+)
#    #    replacement: $1:$2
#    #    target_label: __address__
#    - action: labelmap
#      regex: __meta_kubernetes_pod_label_(.+)
#    - source_labels: [__meta_kubernetes_namespace]
#      action: replace
#      target_label: kubernetes_namespace
#    - source_labels: [__meta_kubernetes_pod_name]
#      action: replace
#      target_label: kubernetes_pod_name
#
#  - job_name: prometheus
#    metrics_path: /metrics
#    static_configs:
#      - targets:
#      - localhost:9090
#      - file_sd_configs:
#      - files:
#      - /etc/prometheus/file_sd/node.yml
#    job_name: node

# Alternative config file name, searched in ansible templates path.
prometheus_config_file: 'prometheus.yml.j2'

